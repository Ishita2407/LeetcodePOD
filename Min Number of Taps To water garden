/* DYNAMIC PROGRAMMING

Transform the ranges to intervals. Makes it easier to find the convergence of the taps and find optimal soln.
class Solution {
    public int minTaps(int n, int[] ranges) {
        // Time complexity - O(n)
        // Space complexity - O(n)
        // To keep track of the right end point for each left endpoint
        int MaxInterval[] = new int[n+1];

        for(int i=0; i < ranges.length; i++){
            int left = Math.max(0, i - ranges[i]);
            int right = Math.min(n, i + ranges[i]);

            // Update the maximum extent for the left position
            MaxInterval[left] = Math.max(MaxInterval[left], right);
        }
        int end = 0;  // current rightmost position reached so far
        int farthest = 0;  // next rightmost position that can be reached
        int i = 0;
        int taps = 0;

        // while this end is less than length of garden
        while(end < n){
            while(i <= end){

                // Update rightmost position that can be reached
                farthest = Math.max(farthest, MaxInterval[i]);
                i++;
            }
            
            // checking convergence
            if(farthest <= end){
                // current position can't be reached
                return -1;
            }
            // Extend the coverage and increment tap count
            end = farthest;
            taps++;
        }
        return taps;
    }
}
*/
